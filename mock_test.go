// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package main

import (
	"context"
	"time"

	"github.com/brunomvsouza/ynab.go/api/transaction"
	mock "github.com/stretchr/testify/mock"
)

// newMockgoCardlesser creates a new instance of mockgoCardlesser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockgoCardlesser(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockgoCardlesser {
	mock := &mockgoCardlesser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockgoCardlesser is an autogenerated mock type for the goCardlesser type
type mockgoCardlesser struct {
	mock.Mock
}

type mockgoCardlesser_Expecter struct {
	mock *mock.Mock
}

func (_m *mockgoCardlesser) EXPECT() *mockgoCardlesser_Expecter {
	return &mockgoCardlesser_Expecter{mock: &_m.Mock}
}

// ListTransactions provides a mock function for the type mockgoCardlesser
func (_mock *mockgoCardlesser) ListTransactions(ctx context.Context, accountID string, from time.Time, to time.Time) ([]Transaction, error) {
	ret := _mock.Called(ctx, accountID, from, to)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactions")
	}

	var r0 []Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) ([]Transaction, error)); ok {
		return returnFunc(ctx, accountID, from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) []Transaction); ok {
		r0 = returnFunc(ctx, accountID, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, accountID, from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockgoCardlesser_ListTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransactions'
type mockgoCardlesser_ListTransactions_Call struct {
	*mock.Call
}

// ListTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID string
//   - from time.Time
//   - to time.Time
func (_e *mockgoCardlesser_Expecter) ListTransactions(ctx interface{}, accountID interface{}, from interface{}, to interface{}) *mockgoCardlesser_ListTransactions_Call {
	return &mockgoCardlesser_ListTransactions_Call{Call: _e.mock.On("ListTransactions", ctx, accountID, from, to)}
}

func (_c *mockgoCardlesser_ListTransactions_Call) Run(run func(ctx context.Context, accountID string, from time.Time, to time.Time)) *mockgoCardlesser_ListTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *mockgoCardlesser_ListTransactions_Call) Return(transactions []Transaction, err error) *mockgoCardlesser_ListTransactions_Call {
	_c.Call.Return(transactions, err)
	return _c
}

func (_c *mockgoCardlesser_ListTransactions_Call) RunAndReturn(run func(ctx context.Context, accountID string, from time.Time, to time.Time) ([]Transaction, error)) *mockgoCardlesser_ListTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// LogIn provides a mock function for the type mockgoCardlesser
func (_mock *mockgoCardlesser) LogIn(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LogIn")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockgoCardlesser_LogIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogIn'
type mockgoCardlesser_LogIn_Call struct {
	*mock.Call
}

// LogIn is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockgoCardlesser_Expecter) LogIn(ctx interface{}) *mockgoCardlesser_LogIn_Call {
	return &mockgoCardlesser_LogIn_Call{Call: _e.mock.On("LogIn", ctx)}
}

func (_c *mockgoCardlesser_LogIn_Call) Run(run func(ctx context.Context)) *mockgoCardlesser_LogIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockgoCardlesser_LogIn_Call) Return(err error) *mockgoCardlesser_LogIn_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockgoCardlesser_LogIn_Call) RunAndReturn(run func(ctx context.Context) error) *mockgoCardlesser_LogIn_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type mockgoCardlesser
func (_mock *mockgoCardlesser) RefreshToken(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockgoCardlesser_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type mockgoCardlesser_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockgoCardlesser_Expecter) RefreshToken(ctx interface{}) *mockgoCardlesser_RefreshToken_Call {
	return &mockgoCardlesser_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx)}
}

func (_c *mockgoCardlesser_RefreshToken_Call) Run(run func(ctx context.Context)) *mockgoCardlesser_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockgoCardlesser_RefreshToken_Call) Return(err error) *mockgoCardlesser_RefreshToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockgoCardlesser_RefreshToken_Call) RunAndReturn(run func(ctx context.Context) error) *mockgoCardlesser_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// newMockynaber creates a new instance of mockynaber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockynaber(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockynaber {
	mock := &mockynaber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockynaber is an autogenerated mock type for the ynaber type
type mockynaber struct {
	mock.Mock
}

type mockynaber_Expecter struct {
	mock *mock.Mock
}

func (_m *mockynaber) EXPECT() *mockynaber_Expecter {
	return &mockynaber_Expecter{mock: &_m.Mock}
}

// CreateTransactions provides a mock function for the type mockynaber
func (_mock *mockynaber) CreateTransactions(budgetID string, p []transaction.PayloadTransaction) (*transaction.OperationSummary, error) {
	ret := _mock.Called(budgetID, p)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransactions")
	}

	var r0 *transaction.OperationSummary
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, []transaction.PayloadTransaction) (*transaction.OperationSummary, error)); ok {
		return returnFunc(budgetID, p)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []transaction.PayloadTransaction) *transaction.OperationSummary); ok {
		r0 = returnFunc(budgetID, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.OperationSummary)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, []transaction.PayloadTransaction) error); ok {
		r1 = returnFunc(budgetID, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockynaber_CreateTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransactions'
type mockynaber_CreateTransactions_Call struct {
	*mock.Call
}

// CreateTransactions is a helper method to define mock.On call
//   - budgetID string
//   - p []transaction.PayloadTransaction
func (_e *mockynaber_Expecter) CreateTransactions(budgetID interface{}, p interface{}) *mockynaber_CreateTransactions_Call {
	return &mockynaber_CreateTransactions_Call{Call: _e.mock.On("CreateTransactions", budgetID, p)}
}

func (_c *mockynaber_CreateTransactions_Call) Run(run func(budgetID string, p []transaction.PayloadTransaction)) *mockynaber_CreateTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []transaction.PayloadTransaction
		if args[1] != nil {
			arg1 = args[1].([]transaction.PayloadTransaction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockynaber_CreateTransactions_Call) Return(operationSummary *transaction.OperationSummary, err error) *mockynaber_CreateTransactions_Call {
	_c.Call.Return(operationSummary, err)
	return _c
}

func (_c *mockynaber_CreateTransactions_Call) RunAndReturn(run func(budgetID string, p []transaction.PayloadTransaction) (*transaction.OperationSummary, error)) *mockynaber_CreateTransactions_Call {
	_c.Call.Return(run)
	return _c
}
