// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package main

import (
	"context"
	"time"

	"github.com/brunomvsouza/ynab.go/api/transaction"
	"github.com/newrelic/go-agent/v3/newrelic"
	mock "github.com/stretchr/testify/mock"
)

// newMockgoCardlesser creates a new instance of mockgoCardlesser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockgoCardlesser(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockgoCardlesser {
	mock := &mockgoCardlesser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockgoCardlesser is an autogenerated mock type for the goCardlesser type
type mockgoCardlesser struct {
	mock.Mock
}

type mockgoCardlesser_Expecter struct {
	mock *mock.Mock
}

func (_m *mockgoCardlesser) EXPECT() *mockgoCardlesser_Expecter {
	return &mockgoCardlesser_Expecter{mock: &_m.Mock}
}

// ListTransactions provides a mock function for the type mockgoCardlesser
func (_mock *mockgoCardlesser) ListTransactions(ctx context.Context, accountID string, from time.Time, to time.Time) ([]Transaction, error) {
	ret := _mock.Called(ctx, accountID, from, to)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactions")
	}

	var r0 []Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) ([]Transaction, error)); ok {
		return returnFunc(ctx, accountID, from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) []Transaction); ok {
		r0 = returnFunc(ctx, accountID, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, accountID, from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockgoCardlesser_ListTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransactions'
type mockgoCardlesser_ListTransactions_Call struct {
	*mock.Call
}

// ListTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID string
//   - from time.Time
//   - to time.Time
func (_e *mockgoCardlesser_Expecter) ListTransactions(ctx interface{}, accountID interface{}, from interface{}, to interface{}) *mockgoCardlesser_ListTransactions_Call {
	return &mockgoCardlesser_ListTransactions_Call{Call: _e.mock.On("ListTransactions", ctx, accountID, from, to)}
}

func (_c *mockgoCardlesser_ListTransactions_Call) Run(run func(ctx context.Context, accountID string, from time.Time, to time.Time)) *mockgoCardlesser_ListTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *mockgoCardlesser_ListTransactions_Call) Return(transactions []Transaction, err error) *mockgoCardlesser_ListTransactions_Call {
	_c.Call.Return(transactions, err)
	return _c
}

func (_c *mockgoCardlesser_ListTransactions_Call) RunAndReturn(run func(ctx context.Context, accountID string, from time.Time, to time.Time) ([]Transaction, error)) *mockgoCardlesser_ListTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// LogIn provides a mock function for the type mockgoCardlesser
func (_mock *mockgoCardlesser) LogIn(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LogIn")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockgoCardlesser_LogIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogIn'
type mockgoCardlesser_LogIn_Call struct {
	*mock.Call
}

// LogIn is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockgoCardlesser_Expecter) LogIn(ctx interface{}) *mockgoCardlesser_LogIn_Call {
	return &mockgoCardlesser_LogIn_Call{Call: _e.mock.On("LogIn", ctx)}
}

func (_c *mockgoCardlesser_LogIn_Call) Run(run func(ctx context.Context)) *mockgoCardlesser_LogIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockgoCardlesser_LogIn_Call) Return(err error) *mockgoCardlesser_LogIn_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockgoCardlesser_LogIn_Call) RunAndReturn(run func(ctx context.Context) error) *mockgoCardlesser_LogIn_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type mockgoCardlesser
func (_mock *mockgoCardlesser) RefreshToken(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockgoCardlesser_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type mockgoCardlesser_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockgoCardlesser_Expecter) RefreshToken(ctx interface{}) *mockgoCardlesser_RefreshToken_Call {
	return &mockgoCardlesser_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx)}
}

func (_c *mockgoCardlesser_RefreshToken_Call) Run(run func(ctx context.Context)) *mockgoCardlesser_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockgoCardlesser_RefreshToken_Call) Return(err error) *mockgoCardlesser_RefreshToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockgoCardlesser_RefreshToken_Call) RunAndReturn(run func(ctx context.Context) error) *mockgoCardlesser_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGoCardlessServicer creates a new instance of MockGoCardlessServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGoCardlessServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGoCardlessServicer {
	mock := &MockGoCardlessServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGoCardlessServicer is an autogenerated mock type for the GoCardlessServicer type
type MockGoCardlessServicer struct {
	mock.Mock
}

type MockGoCardlessServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoCardlessServicer) EXPECT() *MockGoCardlessServicer_Expecter {
	return &MockGoCardlessServicer_Expecter{mock: &_m.Mock}
}

// ListTransactions provides a mock function for the type MockGoCardlessServicer
func (_mock *MockGoCardlessServicer) ListTransactions(ctx context.Context, accountID string, from time.Time, to time.Time) ([]Transaction, error) {
	ret := _mock.Called(ctx, accountID, from, to)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactions")
	}

	var r0 []Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) ([]Transaction, error)); ok {
		return returnFunc(ctx, accountID, from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) []Transaction); ok {
		r0 = returnFunc(ctx, accountID, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, accountID, from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGoCardlessServicer_ListTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransactions'
type MockGoCardlessServicer_ListTransactions_Call struct {
	*mock.Call
}

// ListTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID string
//   - from time.Time
//   - to time.Time
func (_e *MockGoCardlessServicer_Expecter) ListTransactions(ctx interface{}, accountID interface{}, from interface{}, to interface{}) *MockGoCardlessServicer_ListTransactions_Call {
	return &MockGoCardlessServicer_ListTransactions_Call{Call: _e.mock.On("ListTransactions", ctx, accountID, from, to)}
}

func (_c *MockGoCardlessServicer_ListTransactions_Call) Run(run func(ctx context.Context, accountID string, from time.Time, to time.Time)) *MockGoCardlessServicer_ListTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockGoCardlessServicer_ListTransactions_Call) Return(transactions []Transaction, err error) *MockGoCardlessServicer_ListTransactions_Call {
	_c.Call.Return(transactions, err)
	return _c
}

func (_c *MockGoCardlessServicer_ListTransactions_Call) RunAndReturn(run func(ctx context.Context, accountID string, from time.Time, to time.Time) ([]Transaction, error)) *MockGoCardlessServicer_ListTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// LogIn provides a mock function for the type MockGoCardlessServicer
func (_mock *MockGoCardlessServicer) LogIn(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LogIn")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGoCardlessServicer_LogIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogIn'
type MockGoCardlessServicer_LogIn_Call struct {
	*mock.Call
}

// LogIn is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGoCardlessServicer_Expecter) LogIn(ctx interface{}) *MockGoCardlessServicer_LogIn_Call {
	return &MockGoCardlessServicer_LogIn_Call{Call: _e.mock.On("LogIn", ctx)}
}

func (_c *MockGoCardlessServicer_LogIn_Call) Run(run func(ctx context.Context)) *MockGoCardlessServicer_LogIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGoCardlessServicer_LogIn_Call) Return(err error) *MockGoCardlessServicer_LogIn_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGoCardlessServicer_LogIn_Call) RunAndReturn(run func(ctx context.Context) error) *MockGoCardlessServicer_LogIn_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type MockGoCardlessServicer
func (_mock *MockGoCardlessServicer) RefreshToken(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGoCardlessServicer_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockGoCardlessServicer_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGoCardlessServicer_Expecter) RefreshToken(ctx interface{}) *MockGoCardlessServicer_RefreshToken_Call {
	return &MockGoCardlessServicer_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx)}
}

func (_c *MockGoCardlessServicer_RefreshToken_Call) Run(run func(ctx context.Context)) *MockGoCardlessServicer_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGoCardlessServicer_RefreshToken_Call) Return(err error) *MockGoCardlessServicer_RefreshToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGoCardlessServicer_RefreshToken_Call) RunAndReturn(run func(ctx context.Context) error) *MockGoCardlessServicer_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockYNABServicer creates a new instance of MockYNABServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockYNABServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockYNABServicer {
	mock := &MockYNABServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockYNABServicer is an autogenerated mock type for the YNABServicer type
type MockYNABServicer struct {
	mock.Mock
}

type MockYNABServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockYNABServicer) EXPECT() *MockYNABServicer_Expecter {
	return &MockYNABServicer_Expecter{mock: &_m.Mock}
}

// CreateTransactions provides a mock function for the type MockYNABServicer
func (_mock *MockYNABServicer) CreateTransactions(budgetID string, p []transaction.PayloadTransaction) (*transaction.OperationSummary, error) {
	ret := _mock.Called(budgetID, p)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransactions")
	}

	var r0 *transaction.OperationSummary
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, []transaction.PayloadTransaction) (*transaction.OperationSummary, error)); ok {
		return returnFunc(budgetID, p)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []transaction.PayloadTransaction) *transaction.OperationSummary); ok {
		r0 = returnFunc(budgetID, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.OperationSummary)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, []transaction.PayloadTransaction) error); ok {
		r1 = returnFunc(budgetID, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockYNABServicer_CreateTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransactions'
type MockYNABServicer_CreateTransactions_Call struct {
	*mock.Call
}

// CreateTransactions is a helper method to define mock.On call
//   - budgetID string
//   - p []transaction.PayloadTransaction
func (_e *MockYNABServicer_Expecter) CreateTransactions(budgetID interface{}, p interface{}) *MockYNABServicer_CreateTransactions_Call {
	return &MockYNABServicer_CreateTransactions_Call{Call: _e.mock.On("CreateTransactions", budgetID, p)}
}

func (_c *MockYNABServicer_CreateTransactions_Call) Run(run func(budgetID string, p []transaction.PayloadTransaction)) *MockYNABServicer_CreateTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []transaction.PayloadTransaction
		if args[1] != nil {
			arg1 = args[1].([]transaction.PayloadTransaction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockYNABServicer_CreateTransactions_Call) Return(operationSummary *transaction.OperationSummary, err error) *MockYNABServicer_CreateTransactions_Call {
	_c.Call.Return(operationSummary, err)
	return _c
}

func (_c *MockYNABServicer_CreateTransactions_Call) RunAndReturn(run func(budgetID string, p []transaction.PayloadTransaction) (*transaction.OperationSummary, error)) *MockYNABServicer_CreateTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSynchronizationServicer creates a new instance of MockSynchronizationServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSynchronizationServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSynchronizationServicer {
	mock := &MockSynchronizationServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSynchronizationServicer is an autogenerated mock type for the SynchronizationServicer type
type MockSynchronizationServicer struct {
	mock.Mock
}

type MockSynchronizationServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSynchronizationServicer) EXPECT() *MockSynchronizationServicer_Expecter {
	return &MockSynchronizationServicer_Expecter{mock: &_m.Mock}
}

// SynchronizeTransaction provides a mock function for the type MockSynchronizationServicer
func (_mock *MockSynchronizationServicer) SynchronizeTransaction(ctx context.Context, j job) error {
	ret := _mock.Called(ctx, j)

	if len(ret) == 0 {
		panic("no return value specified for SynchronizeTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, job) error); ok {
		r0 = returnFunc(ctx, j)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSynchronizationServicer_SynchronizeTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SynchronizeTransaction'
type MockSynchronizationServicer_SynchronizeTransaction_Call struct {
	*mock.Call
}

// SynchronizeTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - j job
func (_e *MockSynchronizationServicer_Expecter) SynchronizeTransaction(ctx interface{}, j interface{}) *MockSynchronizationServicer_SynchronizeTransaction_Call {
	return &MockSynchronizationServicer_SynchronizeTransaction_Call{Call: _e.mock.On("SynchronizeTransaction", ctx, j)}
}

func (_c *MockSynchronizationServicer_SynchronizeTransaction_Call) Run(run func(ctx context.Context, j job)) *MockSynchronizationServicer_SynchronizeTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 job
		if args[1] != nil {
			arg1 = args[1].(job)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSynchronizationServicer_SynchronizeTransaction_Call) Return(err error) *MockSynchronizationServicer_SynchronizeTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSynchronizationServicer_SynchronizeTransaction_Call) RunAndReturn(run func(ctx context.Context, j job) error) *MockSynchronizationServicer_SynchronizeTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// SynchronizeTransactions provides a mock function for the type MockSynchronizationServicer
func (_mock *MockSynchronizationServicer) SynchronizeTransactions(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SynchronizeTransactions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSynchronizationServicer_SynchronizeTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SynchronizeTransactions'
type MockSynchronizationServicer_SynchronizeTransactions_Call struct {
	*mock.Call
}

// SynchronizeTransactions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSynchronizationServicer_Expecter) SynchronizeTransactions(ctx interface{}) *MockSynchronizationServicer_SynchronizeTransactions_Call {
	return &MockSynchronizationServicer_SynchronizeTransactions_Call{Call: _e.mock.On("SynchronizeTransactions", ctx)}
}

func (_c *MockSynchronizationServicer_SynchronizeTransactions_Call) Run(run func(ctx context.Context)) *MockSynchronizationServicer_SynchronizeTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSynchronizationServicer_SynchronizeTransactions_Call) Return(err error) *MockSynchronizationServicer_SynchronizeTransactions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSynchronizationServicer_SynchronizeTransactions_Call) RunAndReturn(run func(ctx context.Context) error) *MockSynchronizationServicer_SynchronizeTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMonitoringServicer creates a new instance of MockMonitoringServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMonitoringServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMonitoringServicer {
	mock := &MockMonitoringServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMonitoringServicer is an autogenerated mock type for the MonitoringServicer type
type MockMonitoringServicer struct {
	mock.Mock
}

type MockMonitoringServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMonitoringServicer) EXPECT() *MockMonitoringServicer_Expecter {
	return &MockMonitoringServicer_Expecter{mock: &_m.Mock}
}

// AddAttribute provides a mock function for the type MockMonitoringServicer
func (_mock *MockMonitoringServicer) AddAttribute(txn *newrelic.Transaction, key string, value interface{}) {
	_mock.Called(txn, key, value)
	return
}

// MockMonitoringServicer_AddAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAttribute'
type MockMonitoringServicer_AddAttribute_Call struct {
	*mock.Call
}

// AddAttribute is a helper method to define mock.On call
//   - txn *newrelic.Transaction
//   - key string
//   - value interface{}
func (_e *MockMonitoringServicer_Expecter) AddAttribute(txn interface{}, key interface{}, value interface{}) *MockMonitoringServicer_AddAttribute_Call {
	return &MockMonitoringServicer_AddAttribute_Call{Call: _e.mock.On("AddAttribute", txn, key, value)}
}

func (_c *MockMonitoringServicer_AddAttribute_Call) Run(run func(txn *newrelic.Transaction, key string, value interface{})) *MockMonitoringServicer_AddAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *newrelic.Transaction
		if args[0] != nil {
			arg0 = args[0].(*newrelic.Transaction)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interface{}
		if args[2] != nil {
			arg2 = args[2].(interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMonitoringServicer_AddAttribute_Call) Return() *MockMonitoringServicer_AddAttribute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMonitoringServicer_AddAttribute_Call) RunAndReturn(run func(txn *newrelic.Transaction, key string, value interface{})) *MockMonitoringServicer_AddAttribute_Call {
	_c.Run(run)
	return _c
}

// FromContext provides a mock function for the type MockMonitoringServicer
func (_mock *MockMonitoringServicer) FromContext(ctx context.Context) *newrelic.Transaction {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FromContext")
	}

	var r0 *newrelic.Transaction
	if returnFunc, ok := ret.Get(0).(func(context.Context) *newrelic.Transaction); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*newrelic.Transaction)
		}
	}
	return r0
}

// MockMonitoringServicer_FromContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromContext'
type MockMonitoringServicer_FromContext_Call struct {
	*mock.Call
}

// FromContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMonitoringServicer_Expecter) FromContext(ctx interface{}) *MockMonitoringServicer_FromContext_Call {
	return &MockMonitoringServicer_FromContext_Call{Call: _e.mock.On("FromContext", ctx)}
}

func (_c *MockMonitoringServicer_FromContext_Call) Run(run func(ctx context.Context)) *MockMonitoringServicer_FromContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMonitoringServicer_FromContext_Call) Return(transaction1 *newrelic.Transaction) *MockMonitoringServicer_FromContext_Call {
	_c.Call.Return(transaction1)
	return _c
}

func (_c *MockMonitoringServicer_FromContext_Call) RunAndReturn(run func(ctx context.Context) *newrelic.Transaction) *MockMonitoringServicer_FromContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewContext provides a mock function for the type MockMonitoringServicer
func (_mock *MockMonitoringServicer) NewContext(ctx context.Context, txn *newrelic.Transaction) context.Context {
	ret := _mock.Called(ctx, txn)

	if len(ret) == 0 {
		panic("no return value specified for NewContext")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func(context.Context, *newrelic.Transaction) context.Context); ok {
		r0 = returnFunc(ctx, txn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockMonitoringServicer_NewContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewContext'
type MockMonitoringServicer_NewContext_Call struct {
	*mock.Call
}

// NewContext is a helper method to define mock.On call
//   - ctx context.Context
//   - txn *newrelic.Transaction
func (_e *MockMonitoringServicer_Expecter) NewContext(ctx interface{}, txn interface{}) *MockMonitoringServicer_NewContext_Call {
	return &MockMonitoringServicer_NewContext_Call{Call: _e.mock.On("NewContext", ctx, txn)}
}

func (_c *MockMonitoringServicer_NewContext_Call) Run(run func(ctx context.Context, txn *newrelic.Transaction)) *MockMonitoringServicer_NewContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *newrelic.Transaction
		if args[1] != nil {
			arg1 = args[1].(*newrelic.Transaction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMonitoringServicer_NewContext_Call) Return(context1 context.Context) *MockMonitoringServicer_NewContext_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockMonitoringServicer_NewContext_Call) RunAndReturn(run func(ctx context.Context, txn *newrelic.Transaction) context.Context) *MockMonitoringServicer_NewContext_Call {
	_c.Call.Return(run)
	return _c
}

// RecordError provides a mock function for the type MockMonitoringServicer
func (_mock *MockMonitoringServicer) RecordError(txn *newrelic.Transaction, err error) {
	_mock.Called(txn, err)
	return
}

// MockMonitoringServicer_RecordError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordError'
type MockMonitoringServicer_RecordError_Call struct {
	*mock.Call
}

// RecordError is a helper method to define mock.On call
//   - txn *newrelic.Transaction
//   - err error
func (_e *MockMonitoringServicer_Expecter) RecordError(txn interface{}, err interface{}) *MockMonitoringServicer_RecordError_Call {
	return &MockMonitoringServicer_RecordError_Call{Call: _e.mock.On("RecordError", txn, err)}
}

func (_c *MockMonitoringServicer_RecordError_Call) Run(run func(txn *newrelic.Transaction, err error)) *MockMonitoringServicer_RecordError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *newrelic.Transaction
		if args[0] != nil {
			arg0 = args[0].(*newrelic.Transaction)
		}
		var arg1 error
		if args[1] != nil {
			arg1 = args[1].(error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMonitoringServicer_RecordError_Call) Return() *MockMonitoringServicer_RecordError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMonitoringServicer_RecordError_Call) RunAndReturn(run func(txn *newrelic.Transaction, err error)) *MockMonitoringServicer_RecordError_Call {
	_c.Run(run)
	return _c
}

// Shutdown provides a mock function for the type MockMonitoringServicer
func (_mock *MockMonitoringServicer) Shutdown(timeout time.Duration) {
	_mock.Called(timeout)
	return
}

// MockMonitoringServicer_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockMonitoringServicer_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - timeout time.Duration
func (_e *MockMonitoringServicer_Expecter) Shutdown(timeout interface{}) *MockMonitoringServicer_Shutdown_Call {
	return &MockMonitoringServicer_Shutdown_Call{Call: _e.mock.On("Shutdown", timeout)}
}

func (_c *MockMonitoringServicer_Shutdown_Call) Run(run func(timeout time.Duration)) *MockMonitoringServicer_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Duration
		if args[0] != nil {
			arg0 = args[0].(time.Duration)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMonitoringServicer_Shutdown_Call) Return() *MockMonitoringServicer_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMonitoringServicer_Shutdown_Call) RunAndReturn(run func(timeout time.Duration)) *MockMonitoringServicer_Shutdown_Call {
	_c.Run(run)
	return _c
}

// StartSegment provides a mock function for the type MockMonitoringServicer
func (_mock *MockMonitoringServicer) StartSegment(txn *newrelic.Transaction, name string) *newrelic.Segment {
	ret := _mock.Called(txn, name)

	if len(ret) == 0 {
		panic("no return value specified for StartSegment")
	}

	var r0 *newrelic.Segment
	if returnFunc, ok := ret.Get(0).(func(*newrelic.Transaction, string) *newrelic.Segment); ok {
		r0 = returnFunc(txn, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*newrelic.Segment)
		}
	}
	return r0
}

// MockMonitoringServicer_StartSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSegment'
type MockMonitoringServicer_StartSegment_Call struct {
	*mock.Call
}

// StartSegment is a helper method to define mock.On call
//   - txn *newrelic.Transaction
//   - name string
func (_e *MockMonitoringServicer_Expecter) StartSegment(txn interface{}, name interface{}) *MockMonitoringServicer_StartSegment_Call {
	return &MockMonitoringServicer_StartSegment_Call{Call: _e.mock.On("StartSegment", txn, name)}
}

func (_c *MockMonitoringServicer_StartSegment_Call) Run(run func(txn *newrelic.Transaction, name string)) *MockMonitoringServicer_StartSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *newrelic.Transaction
		if args[0] != nil {
			arg0 = args[0].(*newrelic.Transaction)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMonitoringServicer_StartSegment_Call) Return(segment *newrelic.Segment) *MockMonitoringServicer_StartSegment_Call {
	_c.Call.Return(segment)
	return _c
}

func (_c *MockMonitoringServicer_StartSegment_Call) RunAndReturn(run func(txn *newrelic.Transaction, name string) *newrelic.Segment) *MockMonitoringServicer_StartSegment_Call {
	_c.Call.Return(run)
	return _c
}

// StartTransaction provides a mock function for the type MockMonitoringServicer
func (_mock *MockMonitoringServicer) StartTransaction(name string) *newrelic.Transaction {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for StartTransaction")
	}

	var r0 *newrelic.Transaction
	if returnFunc, ok := ret.Get(0).(func(string) *newrelic.Transaction); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*newrelic.Transaction)
		}
	}
	return r0
}

// MockMonitoringServicer_StartTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartTransaction'
type MockMonitoringServicer_StartTransaction_Call struct {
	*mock.Call
}

// StartTransaction is a helper method to define mock.On call
//   - name string
func (_e *MockMonitoringServicer_Expecter) StartTransaction(name interface{}) *MockMonitoringServicer_StartTransaction_Call {
	return &MockMonitoringServicer_StartTransaction_Call{Call: _e.mock.On("StartTransaction", name)}
}

func (_c *MockMonitoringServicer_StartTransaction_Call) Run(run func(name string)) *MockMonitoringServicer_StartTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMonitoringServicer_StartTransaction_Call) Return(transaction1 *newrelic.Transaction) *MockMonitoringServicer_StartTransaction_Call {
	_c.Call.Return(transaction1)
	return _c
}

func (_c *MockMonitoringServicer_StartTransaction_Call) RunAndReturn(run func(name string) *newrelic.Transaction) *MockMonitoringServicer_StartTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// newMockynaber creates a new instance of mockynaber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockynaber(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockynaber {
	mock := &mockynaber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockynaber is an autogenerated mock type for the ynaber type
type mockynaber struct {
	mock.Mock
}

type mockynaber_Expecter struct {
	mock *mock.Mock
}

func (_m *mockynaber) EXPECT() *mockynaber_Expecter {
	return &mockynaber_Expecter{mock: &_m.Mock}
}

// CreateTransactions provides a mock function for the type mockynaber
func (_mock *mockynaber) CreateTransactions(budgetID string, p []transaction.PayloadTransaction) (*transaction.OperationSummary, error) {
	ret := _mock.Called(budgetID, p)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransactions")
	}

	var r0 *transaction.OperationSummary
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, []transaction.PayloadTransaction) (*transaction.OperationSummary, error)); ok {
		return returnFunc(budgetID, p)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []transaction.PayloadTransaction) *transaction.OperationSummary); ok {
		r0 = returnFunc(budgetID, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.OperationSummary)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, []transaction.PayloadTransaction) error); ok {
		r1 = returnFunc(budgetID, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockynaber_CreateTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransactions'
type mockynaber_CreateTransactions_Call struct {
	*mock.Call
}

// CreateTransactions is a helper method to define mock.On call
//   - budgetID string
//   - p []transaction.PayloadTransaction
func (_e *mockynaber_Expecter) CreateTransactions(budgetID interface{}, p interface{}) *mockynaber_CreateTransactions_Call {
	return &mockynaber_CreateTransactions_Call{Call: _e.mock.On("CreateTransactions", budgetID, p)}
}

func (_c *mockynaber_CreateTransactions_Call) Run(run func(budgetID string, p []transaction.PayloadTransaction)) *mockynaber_CreateTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []transaction.PayloadTransaction
		if args[1] != nil {
			arg1 = args[1].([]transaction.PayloadTransaction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockynaber_CreateTransactions_Call) Return(operationSummary *transaction.OperationSummary, err error) *mockynaber_CreateTransactions_Call {
	_c.Call.Return(operationSummary, err)
	return _c
}

func (_c *mockynaber_CreateTransactions_Call) RunAndReturn(run func(budgetID string, p []transaction.PayloadTransaction) (*transaction.OperationSummary, error)) *mockynaber_CreateTransactions_Call {
	_c.Call.Return(run)
	return _c
}
