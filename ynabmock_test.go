// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package main

import (
	"github.com/brunomvsouza/ynab.go/api/account"
	"github.com/brunomvsouza/ynab.go/api/budget"
	"github.com/brunomvsouza/ynab.go/api/category"
	"github.com/brunomvsouza/ynab.go/api/month"
	"github.com/brunomvsouza/ynab.go/api/payee"
	"github.com/brunomvsouza/ynab.go/api/transaction"
	"github.com/brunomvsouza/ynab.go/api/user"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClientServicer creates a new instance of MockClientServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientServicer {
	mock := &MockClientServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClientServicer is an autogenerated mock type for the ClientServicer type
type MockClientServicer struct {
	mock.Mock
}

type MockClientServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientServicer) EXPECT() *MockClientServicer_Expecter {
	return &MockClientServicer_Expecter{mock: &_m.Mock}
}

// Account provides a mock function for the type MockClientServicer
func (_mock *MockClientServicer) Account() *account.Service {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Account")
	}

	var r0 *account.Service
	if returnFunc, ok := ret.Get(0).(func() *account.Service); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.Service)
		}
	}
	return r0
}

// MockClientServicer_Account_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Account'
type MockClientServicer_Account_Call struct {
	*mock.Call
}

// Account is a helper method to define mock.On call
func (_e *MockClientServicer_Expecter) Account() *MockClientServicer_Account_Call {
	return &MockClientServicer_Account_Call{Call: _e.mock.On("Account")}
}

func (_c *MockClientServicer_Account_Call) Run(run func()) *MockClientServicer_Account_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientServicer_Account_Call) Return(service *account.Service) *MockClientServicer_Account_Call {
	_c.Call.Return(service)
	return _c
}

func (_c *MockClientServicer_Account_Call) RunAndReturn(run func() *account.Service) *MockClientServicer_Account_Call {
	_c.Call.Return(run)
	return _c
}

// Budget provides a mock function for the type MockClientServicer
func (_mock *MockClientServicer) Budget() *budget.Service {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Budget")
	}

	var r0 *budget.Service
	if returnFunc, ok := ret.Get(0).(func() *budget.Service); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budget.Service)
		}
	}
	return r0
}

// MockClientServicer_Budget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Budget'
type MockClientServicer_Budget_Call struct {
	*mock.Call
}

// Budget is a helper method to define mock.On call
func (_e *MockClientServicer_Expecter) Budget() *MockClientServicer_Budget_Call {
	return &MockClientServicer_Budget_Call{Call: _e.mock.On("Budget")}
}

func (_c *MockClientServicer_Budget_Call) Run(run func()) *MockClientServicer_Budget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientServicer_Budget_Call) Return(service *budget.Service) *MockClientServicer_Budget_Call {
	_c.Call.Return(service)
	return _c
}

func (_c *MockClientServicer_Budget_Call) RunAndReturn(run func() *budget.Service) *MockClientServicer_Budget_Call {
	_c.Call.Return(run)
	return _c
}

// Category provides a mock function for the type MockClientServicer
func (_mock *MockClientServicer) Category() *category.Service {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Category")
	}

	var r0 *category.Service
	if returnFunc, ok := ret.Get(0).(func() *category.Service); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*category.Service)
		}
	}
	return r0
}

// MockClientServicer_Category_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Category'
type MockClientServicer_Category_Call struct {
	*mock.Call
}

// Category is a helper method to define mock.On call
func (_e *MockClientServicer_Expecter) Category() *MockClientServicer_Category_Call {
	return &MockClientServicer_Category_Call{Call: _e.mock.On("Category")}
}

func (_c *MockClientServicer_Category_Call) Run(run func()) *MockClientServicer_Category_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientServicer_Category_Call) Return(service *category.Service) *MockClientServicer_Category_Call {
	_c.Call.Return(service)
	return _c
}

func (_c *MockClientServicer_Category_Call) RunAndReturn(run func() *category.Service) *MockClientServicer_Category_Call {
	_c.Call.Return(run)
	return _c
}

// Month provides a mock function for the type MockClientServicer
func (_mock *MockClientServicer) Month() *month.Service {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Month")
	}

	var r0 *month.Service
	if returnFunc, ok := ret.Get(0).(func() *month.Service); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*month.Service)
		}
	}
	return r0
}

// MockClientServicer_Month_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Month'
type MockClientServicer_Month_Call struct {
	*mock.Call
}

// Month is a helper method to define mock.On call
func (_e *MockClientServicer_Expecter) Month() *MockClientServicer_Month_Call {
	return &MockClientServicer_Month_Call{Call: _e.mock.On("Month")}
}

func (_c *MockClientServicer_Month_Call) Run(run func()) *MockClientServicer_Month_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientServicer_Month_Call) Return(service *month.Service) *MockClientServicer_Month_Call {
	_c.Call.Return(service)
	return _c
}

func (_c *MockClientServicer_Month_Call) RunAndReturn(run func() *month.Service) *MockClientServicer_Month_Call {
	_c.Call.Return(run)
	return _c
}

// Payee provides a mock function for the type MockClientServicer
func (_mock *MockClientServicer) Payee() *payee.Service {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Payee")
	}

	var r0 *payee.Service
	if returnFunc, ok := ret.Get(0).(func() *payee.Service); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payee.Service)
		}
	}
	return r0
}

// MockClientServicer_Payee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Payee'
type MockClientServicer_Payee_Call struct {
	*mock.Call
}

// Payee is a helper method to define mock.On call
func (_e *MockClientServicer_Expecter) Payee() *MockClientServicer_Payee_Call {
	return &MockClientServicer_Payee_Call{Call: _e.mock.On("Payee")}
}

func (_c *MockClientServicer_Payee_Call) Run(run func()) *MockClientServicer_Payee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientServicer_Payee_Call) Return(service *payee.Service) *MockClientServicer_Payee_Call {
	_c.Call.Return(service)
	return _c
}

func (_c *MockClientServicer_Payee_Call) RunAndReturn(run func() *payee.Service) *MockClientServicer_Payee_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function for the type MockClientServicer
func (_mock *MockClientServicer) Transaction() *transaction.Service {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 *transaction.Service
	if returnFunc, ok := ret.Get(0).(func() *transaction.Service); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Service)
		}
	}
	return r0
}

// MockClientServicer_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type MockClientServicer_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
func (_e *MockClientServicer_Expecter) Transaction() *MockClientServicer_Transaction_Call {
	return &MockClientServicer_Transaction_Call{Call: _e.mock.On("Transaction")}
}

func (_c *MockClientServicer_Transaction_Call) Run(run func()) *MockClientServicer_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientServicer_Transaction_Call) Return(service *transaction.Service) *MockClientServicer_Transaction_Call {
	_c.Call.Return(service)
	return _c
}

func (_c *MockClientServicer_Transaction_Call) RunAndReturn(run func() *transaction.Service) *MockClientServicer_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function for the type MockClientServicer
func (_mock *MockClientServicer) User() *user.Service {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 *user.Service
	if returnFunc, ok := ret.Get(0).(func() *user.Service); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Service)
		}
	}
	return r0
}

// MockClientServicer_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type MockClientServicer_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
func (_e *MockClientServicer_Expecter) User() *MockClientServicer_User_Call {
	return &MockClientServicer_User_Call{Call: _e.mock.On("User")}
}

func (_c *MockClientServicer_User_Call) Run(run func()) *MockClientServicer_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientServicer_User_Call) Return(service *user.Service) *MockClientServicer_User_Call {
	_c.Call.Return(service)
	return _c
}

func (_c *MockClientServicer_User_Call) RunAndReturn(run func() *user.Service) *MockClientServicer_User_Call {
	_c.Call.Return(run)
	return _c
}
